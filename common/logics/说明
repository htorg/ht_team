原则是以页面为单位来规划每个页面所需要数据，数据基本上划分为：
1、站点全局数据
2、页面业务数据

Logic封装了每个页面获取业务数据的逻辑，主要功能如下：
1、从数据库中读取数据
2、从缓存中读取数据
3、处理缓存和源数据之间的关系
4、决定了PageData中包含有哪些子项目

Logic命名规范
按照页面名称，也就是ControllerActionLogic的方式来命名
比如当我们新增一个site/index的页面时，需要在SiteController中新增actionIndex()
此时，我们就需要新增一个SiteIndexLogic的类，用来完成site/index这个页面所需要的全部业务数据，这个类可以加在logics\basic命名空间中，
也可以加在主题对应的logics目录中。

如果logics\basic已经存在对应的Logic类，而主题中有些独特的数据需要返回，也可以在主题对应的logics中新增Logic类，
这个类会继承logics\basic中对应的基类（如果存在），不存在的话直接继承基础基类Logic，
子类可以覆盖，也可以修改父类中返回的数据

SiteLogic是一个特殊Logic
它的主要功能是读取当前页面业务数据之外的站点全局数据，比如Header和Footer中所需要的数据，比如在所有页面都有的联系人浮窗的数据。
它决定了SiteData中包含有哪些子项目


Cache相关规范

缓存key命名规范
采用Cache_[controller]_[action]_[data]
比如CacheSiteIndexArticles
缓存的site/index页面的articles，也即首页的文章列表

缓存未命中时，需要重建缓存
CacheLogic::get 当缓存未命中时，返回false
CacheLogic::set
CacheLogic::del

